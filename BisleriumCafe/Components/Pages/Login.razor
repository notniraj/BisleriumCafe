@page "/login"
@layout Layout.ShellLayout
@inject NavigationManager NavManager
@inject CoffeeServices CoffeeServices
@inject ISnackbar SnackBar


<!-- Login form with MudBlazor components -->
<div class="loginbg container-lg d-flex vw-100 vh-100 align-items-center justify-content-center">
    <div class="d-grid">
        <form class="text-center" @onsubmit="LoginHandler">
            <MudIcon Icon="@Icons.Material.Filled.Coffee" Size="Size.Large"></MudIcon>
            
            <h1 class="h1 mb-3 fw-normal">Bislerium Cafe</h1>
            <h4 class="h4 mb-4 fw-normal ">Grab Your Energy!</h4>

            <!-- Username input with binding -->
            <div class="form-floating mb-3">
                <input type="text" class="form-control username" @bind="_username" placeholder="Username" />
                <label for="floatinigInput">Username</label>
            </div>

            <!-- Password input with binding -->
            <div class="form-floating mb-3">
                <input type="password" class="form-control password" @bind="_password" placeholder="Password" />
                <label for="floatingPassword">Password</label>
            </div>

            <!-- Display error message if any -->
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <AlertMessage Type="danger" Message="@_errorMessage" />
            }

            <!-- Submit button for login -->
            <button class="w-100 btn btn-lg btn-primary" type="submit">
                <span class="oi oi-account-login"></span> Login
            </button>
        </form>
    </div>
</div>

@code {
    // Cascading parameter to share global state
    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    // Username and password properties for data binding
    private string _username { get; set; }
    private string _password { get; set; }

    // Error message property for displaying login errors
    private string _errorMessage = "";

    // Initialization method to seed default login credentials
    protected override void OnInitialized()
    {
        try
        {

            // Attempt to login with default seed credentials
            var user = UsersService.Login(UsersService.SeedUsername, UsersService.SeedPassword);
        }
        catch { }

        // Reset current user and error message
        _globalState.CurrentUser = null;
        _errorMessage = "";
    }

    // Login handler method
    private void LoginHandler()
    {
        try
        {
            // Attempt to login with provided credentials
            _errorMessage = "";
            _globalState.CurrentUser = UsersService.Login(_username, _password);
            
            // Redirect based on user role after successful login
            if (_globalState.CurrentUser != null && _globalState.CurrentUser.Role == (Role.Admin))
            {
                SnackBar.Add("Login Successful", Severity.Success);
                NavManager.NavigateTo("/coffees");
            }
            else
            {
                SnackBar.Add("Login Successful", Severity.Success);
                NavManager.NavigateTo("/ordercoffee");
            }
        }
        catch (Exception e)
        {
            // Display login error message
            SnackBar.Add(e.Message, Severity.Error);

        }
    }
}